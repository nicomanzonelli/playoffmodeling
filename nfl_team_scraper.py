# -*- coding: utf-8 -*-
"""NFLDataScraper.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18iHwI_bBxTiEHurc_sJyBDwXN1lOrnr-
"""

#import packages
from bs4 import BeautifulSoup
import pandas as pd
import numpy as np
import requests

baseurl = "https://www.pro-football-reference.com/teams/"
r = requests.get(baseurl)
soup = BeautifulSoup(r.text, 'html.parser')

teamlinks = []
for a in soup.find_all('a'):
  link = a.get('href')
  if link[0:7] == "/teams/":
    if len(link) > 8:
      teamlinks.append("https://www.pro-football-reference.com/" + link[0:10])

alllinks = []
for team in teamlinks:
  for year in list(range(2002,2022)):
    alllinks.append(team + "/" + str(year) + ".htm")

d = {'team': [], 'year': [],
     'min_points_scored': [], 'max_points_scored': [], 'avg_points_scored': [],
     'min_points_allowed': [], 'max_points_allowed': [], 'avg_points_allowed': [],
     'min_yards': [], 'max_yards': [], 'avg_yards': [],
     'min_pass_yds': [], 'max_pass_yds': [], 'avg_pass_yds': [],
     'min_rush_yds': [], 'max_rush_yds': [], 'avg_rush_yds': [],
     'min_turno': [], 'max_turno': [], 'avg_turno': [],
     'min_yards_allowed': [], 'max_yards_allowed': [], 'avg_yards_allowed': [],
     'min_pass_yds_allowed': [], 'max_pass_yds_allowed': [], 'avg_pass_yds_allowed': [],
     'min_rush_yds_allowed': [], 'max_rush_yds_allowed': [], 'avg_rush_yds_allowed': [],
     'min_turno_forced': [], 'max_turno_forced': [], 'avg_turno_forced': [],
     'redzone_pct': [], 'redzone_pct_allowed': [],
     'pct_drives_score': [], 'pct_drives_score_allowed': [],
     'pct_drives_to': [], 'pct_drives_to_forced': []}

for url in alllinks:
  all_tables = pd.read_html(url)
  table0 = all_tables[0]
  table1 = all_tables[1]
  table2 = all_tables[2]
  d['team'].append(url[46:49])
  d['year'].append(url[50:54])

  #want min, max, avg of each for the season
  d['min_points_scored'].append(min(table1[('Score', "Tm")]))
  d['max_points_scored'].append(max(table1[('Score', "Tm")]))
  d['avg_points_scored'].append(np.mean(table1[('Score', "Tm")]))

  d["min_points_allowed"].append(min(table1[('Score', "Opp")]))
  d["max_points_allowed"].append(max(table1[('Score', "Opp")]))
  d["avg_points_allowed"].append(np.mean(table1[('Score', "Opp")]))

  d['min_yards'].append(min(table1[('Offense', 'TotYd')]))
  d['max_yards'].append(max(table1[('Offense', 'TotYd')]))
  d['avg_yards'].append(np.mean(table1[('Offense', 'TotYd')]))

  d['min_pass_yds'].append(min(table1[('Offense', 'PassY')]))
  d['max_pass_yds'].append(max(table1[('Offense', 'PassY')]))
  d['avg_pass_yds'].append(np.mean(table1[('Offense', 'PassY')]))

  d['min_rush_yds'].append(min(table1[('Offense', 'RushY')]))
  d['max_rush_yds'].append(max(table1[('Offense', 'RushY')]))
  d['avg_rush_yds'].append(np.mean(table1[('Offense', 'RushY')]))
  #Turn Overs Lost By Team
  d['min_turno'].append(min(table1[('Offense', 'TO')]))
  d['max_turno'].append(max(table1[('Offense', 'TO')]))
  d['avg_turno'].append(np.mean(table1[('Offense', 'TO')]))

  d['min_yards_allowed'].append(min(table1[('Defense', 'TotYd')]))
  d['max_yards_allowed'].append(max(table1[('Defense', 'TotYd')]))
  d['avg_yards_allowed'].append(np.mean(table1[('Defense', 'TotYd')]))

  d['min_pass_yds_allowed'].append(min(table1[('Defense', 'PassY')]))
  d['max_pass_yds_allowed'].append(max(table1[('Defense', 'PassY')]))
  d['avg_pass_yds_allowed'].append(np.mean(table1[('Defense', 'PassY')]))

  d['min_rush_yds_allowed'].append(min(table1[('Defense', 'RushY')]))
  d['max_rush_yds_allowed'].append(max(table1[('Defense', 'RushY')]))
  d['avg_rush_yds_allowed'].append(np.mean(table1[('Defense', 'RushY')]))

  #Turn Overs Forced
  d['min_turno_forced'].append(min(table1[('Defense', 'TO')]))
  d['max_turno_forced'].append(max(table1[('Defense', 'TO')]))
  d['avg_turno_forced'].append(np.mean(table1[('Defense', 'TO')]))

  #Season Red Zone Pct
  d['redzone_pct'].append(table2[('Red Zone', "RZPct")][0]) #For team
  d['redzone_pct_allowed'].append(table2[('Red Zone', "RZPct")][1]) #Against team

  #Percentage of Drives Resulting in Score
  d['pct_drives_score'].append(table0[('Unnamed: 24_level_0','Sc%')][0]) #For team
  d['pct_drives_score_allowed'].append(table0[('Unnamed: 24_level_0','Sc%')][1]) #Against team

  #Percentage of Drives Resulting in Turn Over
  d['pct_drives_to'].append(table0[('Unnamed: 25_level_0','TO%')][0]) #Turnover by Team
  d['pct_drives_to_forced'].append(table0[('Unnamed: 25_level_0','TO%')][1]) #Turnover forced by D

pd.DataFrame(d).to_csv("team_data.csv")